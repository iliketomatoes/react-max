{"version":3,"sources":["webpack:///./src/App/index.tsx","webpack:///./src/index.tsx","webpack:///./src/App/style.css","webpack:///./src/App/style.css?a188","webpack:///./src/registerServiceWorker.ts"],"names":["src_App","_super","App","__extends","prototype","render","react","className","style","Object","react_dom","document","getElementById","registerServiceWorker","exports","module","__webpack_require__","push","i","locals","AppIntro","content","options","hmr","transform","insertInto","undefined","update","hot","accept","newContent","a","b","key","idx","Error","dispose","process","d","__webpack_exports__","register","isLocalhost","Boolean","window","location","hostname","match","navigator","URL","env","PUBLIC_URL","toString","origin","addEventListener","swUrl","fetch","then","response","status","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","error"],"mappings":"udAkBeA,EAff,SAAAC,GAAA,SAAAC,mDAaA,OAbkBC,EAAAD,EAAAD,GACTC,EAAAE,UAAAC,OAAP,WACE,OACEC,EAAA,qBAAKC,UAAU,OACbD,EAAA,wBAAQC,UAAU,cAChBD,EAAA,oBAAIC,UAAU,aAAW,gCAE3BD,EAAA,mBAAGC,UAAWC,EAAA,kCACSF,EAAA,yEAK/BJ,EAbA,CAAkBI,EAAA,uBCGlBG,OAAAC,EAAA,OAAAD,CACEH,EAAA,cAACN,EAAG,MACJW,SAASC,eAAe,SAI1BH,OAAAI,EAAA,EAAAJ,0BCZAK,EAAAC,EAAAD,QAA2BE,EAAQ,OAARA,EAAuD,IAKlFC,MAAcF,EAAAG,EAAS,mEAAiE,KAGxFJ,EAAAK,QACAC,SAAA,+DCRA,IAAAC,EAAcL,EAAQ,QAEtB,iBAAAK,QAA4CN,EAAAG,EAASG,EAAA,MAOrD,IAAAC,GAAeC,KAAA,EAEfC,eAPAA,EAQAC,gBAAAC,GAEAC,EAAaX,EAAQ,OAARA,CAA2DK,EAAAC,GAExED,EAAAF,SAAAJ,EAAAD,QAAAO,EAAAF,QAGAJ,EAAAa,IAAAC,OAAmB,OAAgE,WACnF,IAAAC,EAAmBd,EAAQ,QAiB3B,GAfA,iBAAAc,QAAoDf,EAAAG,EAASY,EAAA,OAE7D,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAA,EAEA,IAAAD,KAAAF,EAAA,CACA,IAAAC,GAAAD,EAAAE,KAAAD,EAAAC,GAAA,SACAC,IAGA,IAAAD,KAAAD,EAAAE,IAEA,WAAAA,EAVA,CAWGb,EAAAF,OAAAW,EAAAX,QAEH,UAAAgB,MAAA,uDAEAR,EAAAG,KAGAf,EAAAa,IAAAQ,QAAA,WAAgCT,0CC3ChC,SAAAU,GAAArB,EAAAsB,EAAAC,EAAA,sBAAAC,IAWA,IAAMC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIS,SAASN,IACtB,GAA6C,kBAAmBO,UAAW,CAMzE,GAJkB,IAAIC,IACpBX,EAAQY,IAAIC,WACZP,OAAOC,SAASO,YAEJC,SAAWT,OAAOC,SAASQ,OAIvC,OAGFT,OAAOU,iBAAiB,OAAQ,WAC9B,IAAMC,EAAWjB,EAAQY,IAAIC,WAAU,qBAEnCT,IAmDV,SAAiCa,GAE/BC,MAAMD,GACHE,KAAK,SAAAC,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9Cd,UAAUe,cAAcC,MAAMP,KAAK,SAAAQ,GACjCA,EAAaC,aAAaT,KAAK,WAC7Bb,OAAOC,SAASsB,aAKpBC,EAAgBb,KAGnBc,MAAM,WACLC,QAAQC,IACN,mEAvEAC,CAAwBjB,GAIxBP,UAAUe,cAAcC,MAAMP,KAAK,WACjCa,QAAQC,IACN,+GAMJH,EAAgBb,MAMxB,SAASa,EAAgBb,GACvBP,UAAUe,cACPtB,SAASc,GACTE,KAAK,SAAAQ,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf7B,UAAUe,cAAce,WAK1BR,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBF,MAAM,SAAAU,GACLT,QAAQS,MAAM,4CAA6CA","file":"main.2599fca739400d4393f8.chunk.js","sourcesContent":["import * as React from 'react';\nimport * as style from './style.css';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to React, Giancarlo</h1>\n        </header>\n        <p className={style.AppIntro}>\n          To get started, edit <code>src/App/index.tsx</code> and save to reload.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n// Render the app\nrender(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\n\n// Register the service worker\nregisterServiceWorker();\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".style_AppIntro_3Q2Yi2jYmf1GMNTSKz3lD_ {\\n  color: #651fff;\\n}\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"AppIntro\": \"style_AppIntro_3Q2Yi2jYmf1GMNTSKz3lD_\"\n};","\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--4-1!./style.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--4-1!./style.css\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--4-1!./style.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n\n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL!,\n        window.location.toString()\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n\n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n\n  function registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker) {\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a 'New content is\n                  // available; please refresh.' message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // 'Content is cached for offline use.' message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          }\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n\n  function checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type')!.indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n\n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n"],"sourceRoot":""}